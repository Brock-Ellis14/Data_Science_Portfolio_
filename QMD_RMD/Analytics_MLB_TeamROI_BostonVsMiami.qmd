---
title: "ROI Baseball Analytics"
author: "Brock Ellis"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
project:
  type: website
  output-dir: docs
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
sqlite_file = 'lahman_1871-2022.sqlite'
con = sqlite3.connect(sqlite_file)
tables = pd.read_sql_query("SELECT name FROM sqlite_master WHERE type='table';", con)
```

# ROI Baseball Salaries

This section of the analysis will have the purpose of seeing if salary expenditure on teams is related to post season success.

```{python}
# Perform a query that returns the total salary, total wins, total losses, per year and team
base = pd.read_sql_query("""
WITH ps AS (
  -- collect game wins for both winners and losers of each postseason series
  SELECT yearID, teamIDwinner AS teamID, wins   AS gwins FROM SeriesPost
  UNION ALL
  SELECT yearID, teamIDloser  AS teamID, losses AS gwins FROM SeriesPost
),
ps_agg AS (
  SELECT yearID, teamID, SUM(gwins) AS postseason_wins
  FROM ps
  GROUP BY yearID, teamID
),
ws AS (
  SELECT yearID, teamIDwinner AS teamID, 1 AS won_ws
  FROM SeriesPost
  WHERE round = 'WS'
)
SELECT
    t.yearID,
    t.name,
    SUM(s.salary) AS total_salary,
    t.W AS wins,
    t.L AS losses,
    COALESCE(ps_agg.postseason_wins, 0) AS postseason_wins,   -- <-- total PS wins (all rounds)
    COALESCE(ws.won_ws, 0) AS won_world_series                 -- 1 if WS champ, else 0
FROM teams t
JOIN salaries s
  ON t.teamID = s.teamID
 AND t.yearID = s.yearID
LEFT JOIN ps_agg
  ON ps_agg.teamID = t.teamID
 AND ps_agg.yearID = t.yearID
LEFT JOIN ws
  ON ws.teamID = t.teamID
 AND ws.yearID = t.yearID
GROUP BY t.teamID, t.yearID, t.name, t.W, t.L, ps_agg.postseason_wins, ws.won_ws
ORDER BY t.yearID;
""", con)


# Calculate a wins per million dollars expended column
base['wins_per_million'] = base['wins'] / (base['total_salary'] / 1_000_000)

# Change won_world_series to boolean
base['won_world_series'] = base['won_world_series'].astype('bool')

# Convert Salary to millions
base['total_salary'] = base['total_salary'] / 1000000

```
```{python}
ggplot(base, aes(x="total_salary")) +\
  geom_histogram()
```

```{python}
ggplot(base, aes(x="wins")) +\
  geom_histogram()
```

```{python}
ggplot(base, aes(x="won_world_series", y='total_salary', fill='won_world_series')) +\
  geom_boxplot() +\
  scale_y_continuous(limits=(0,200))
```

```{python}
ggplot(base, aes(x="won_world_series", y='wins', fill='won_world_series')) +\
  geom_boxplot() +\
  scale_y_continuous(limits=(40,120))
```

```{python}
ggplot(base, aes(x="won_world_series", y='wins_per_million', fill='won_world_series')) +\
  geom_boxplot() +\
  scale_y_continuous(limits=(0,10))
```

```{python}
ggplot(base, aes(x="wins", y='total_salary', col='won_world_series')) +\
  geom_point() +\
  geom_smooth(method='lm') +\
  scale_y_continuous(limits=(0,200))
```


```{python}
import statsmodels.formula.api as smf

model_simple = smf.ols(
    "total_salary ~  wins + won_world_series",
    data=base
).fit(cov_type="HC3")

print(model_simple.summary())

```

